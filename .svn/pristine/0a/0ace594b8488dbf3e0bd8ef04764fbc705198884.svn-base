<!--
程序名：问卷模块管理
功能：管理网站的问卷模块
-->
<template>
  <section>
    <!--工具条-->
    <el-col
      :span="24"
      class="el-table_headtoolbar"
      style="padding-bottom: 15px;"
    >
      <el-col :span="4" :offset="20">
        <el-button
          plain
          type="primary"
          icon="el-icon-plus"
          @click="addModular('添加问卷')"
          >添加问卷</el-button
        >
      </el-col>
    </el-col>
    <el-table
      :data="modularList"
      :default-sort="{ prop: 'date', order: 'descending' }"
      :height="screenHeight"
      border
    >
      <el-table-column prop="sn" sortable label="问卷标识" width="250">
      </el-table-column>
      <el-table-column prop="queTitle" label="问卷标题" width="200">
      </el-table-column>
      <el-table-column prop="queStatus" label="问卷状态">
        <span v-if="queStatus == 0">未发布</span>
        <span v-else-if="queStatus == 1">已发布</span>
        <span v-else-if="queStatus == 2">已结束</span>
        <span v-else-if="queStatus == 3">已删除</span>
      </el-table-column>
      <el-table-column prop="verifyState" label="审核状态">
        <span v-if="queStatus == 0">未审核</span>
        <span v-else-if="queStatus == 1">已审核</span>
        <span v-else-if="queStatus == 2">审核失败</span>
      </el-table-column>
      <el-table-column prop="queDescribe" label="问卷描述"> </el-table-column>
      <el-table-column
        prop="enabledMark"
        label="启用状态"
        :formatter="enabledMarkFormat"
        width="100"
      >
      </el-table-column>
      <el-table-column align="right" fixed="right" width="300">
        <template slot="header" slot-scope="scope">
          <el-input
            v-model="queryJson"
            size="mini"
            :fetch-suggestions="querySearch"
            @select="handleSelect"
            placeholder="输入关键字搜索"
            :input="searchRole(scope)"
          />
        </template>
        <template slot-scope="scope">
          <el-button size="mini" @click="updateModular('编辑问卷', scope.row)"
            >编辑问卷</el-button
          >

          <el-button size="mini" @click="goProblemData(scope.row)"
            >添加问卷问题</el-button
          >
          <el-button
            size="mini"
            type="danger"
            @click="handleDelete(scope.$index, scope.row)"
            >删除</el-button
          >
        </template>
      </el-table-column>
    </el-table>
    <!--翻页栏-->
    <el-col :span="24" class="el-table_footertoolbar">
      <el-pagination
        :hide-on-single-page="false"
        background
        layout="total, sizes, prev, pager, next"
        :page-sizes="[10, 20, 50, 100]"
        :total="records"
        style="float:right;"
        @size-change="handleSizeChange"
        @current-change="handleCurrentChange"
      >
      </el-pagination>
    </el-col>
    <!--保存问卷模板界面-->
    <el-dialog :title="fromTitle" :visible.sync="formVisible">
      <el-form
        :model="profile"
        label-width="80px"
        :rules="profileRules"
        ref="profile"
      >
        <el-form-item label="问卷标题" prop="queTitle">
          <el-input v-model="profile.queTitle" auto-complete="off"></el-input>
        </el-form-item>
        <el-form-item label="问卷表述" prop="queDescribe">
          <el-input v-model="profile.queDescribe"></el-input>
        </el-form-item>
        <el-form-item label="备注" prop="remarks">
          <el-input v-model="profile.remarks"></el-input>
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click.native="formVisible = false">取消</el-button>
        <el-button
          type="primary"
          @click.native="formSubmit('profile')"
          :loading="formLoading"
          >提交</el-button
        >
      </div>
    </el-dialog>
  </section>
</template>

<script>
export default {
  data() {
    return {
      modularList: [], //问卷模板信息
      queryJson: "", //搜索条件
      screenHeight: window.innerHeight - 220, //当前窗体高度-导航栏高度
      currentPage: 1,
      pagesize: 10,
      total: 0,
      records: 0,
      profile: {
        sn: "", //问卷标识
        queTitle: "", //问卷标题
        queDescribe: "", //问卷描述
        remarks: "" //备注
      },
      profileRules: {
        //表单用户信息的格式显示
        categoryName: [
          {
            required: true,
            message: "分类名称必须填写!!",
            trigger: "blur"
          }
        ]
      },
      formVisible: false, //表单的打开和关闭的控制
      formLoading: false, //表单
      fromTitle: "" //
    };
  },
  components: {},
  methods: {
    goProblemData(row) {
      this.$router.push({ path: `/management/problemData/${row.sn}` });
    },
    //删除用户信息
    handleDelete(index, row) {
      this.$confirm("确认要删除此用户信息吗？", "提示", {}).then(() => {
        this.$axios.delete(`/modular/${row.sn}`).then(res => {
          if (res.data.code == 200) {
            this.$message({
              type: "success",
              message: "删除成功!"
            });
            this.loading = false;
            this.getAllModularList();
            this.defaultActive = 1;
          } else {
            this.$message({
              type: "error",
              message: data.msg
            });
          }
        });
      });
    },
    //搜索
    //当输入框内容发生改变时或者失去输入框焦点时触发
    searchRole(scope) {
      console.log(this.searchStr + "搜索");
      this.getAllModularList();
    },
    handleSizeChange(size) {
      this.rows = size;
      this.getAllModularList();
    },
    handleCurrentChange(val) {
      this.page = val;
      this.getAllModularList();
    },
    //搜索
    querySearch(queryJson, cb) {
      this.getAllModular();
      let modularList = this.queryUserList;
      let modulars = queryJson
        ? modularList.filter(this.createFilter(queryJson))
        : modularList;
      let modularValue = [];
      modulars.forEach(modular => {
        modularValue.push({ value: modular.mainTitle });
      });
      // 调用 callback 返回建议列表的数据
      cb(modularValue);
    },
    createFilter(queryJson) {
      return modular => {
        return (
          modular.mainTitle.toLowerCase().indexOf(queryJson.toLowerCase()) !==
          -1
        );
      };
    },
    handleSelect(item) {
      console.log(item);
      this.queryJson = item.value;
      this.getAllModularList();
    },
    //获取问卷模板列表
    getAllModularList() {
      this.$axios
        .get("/modular/queryGridJson", {
          params: {
            queryJson: this.queryJson,
            page: this.currentPage, //当前页
            rows: this.pagesize, //页面数据数量
            total: this.total / this.pagesize, //页数
            records: this.total, //总数
            code: ""
          }
        })
        .then(res => {
          let data = res.data.data;
          if (data !== null) {
            this.modularList = data.rows;
            this.page = data.page;
            this.rows = data.pagesize;
            this.total = data.total;
            this.records = data.records;
          }
        });
    },
    //获取所有的模板信息，不包含查询和分页
    getAllModular() {
      this.$axios
        .get("/modular/queryGridJson", {
          params: {
            rows: 99999 //页面数据数量
          }
        })
        .then(res => {
          this.modularList = res.data.data.rows;
        });
    },
    //数据格式化
    enabledMarkFormat(row, column) {
      if (row.enabledMark === true) {
        return "启用";
      } else {
        return "未启用";
      }
    },
    //初始页page、初始每页数据数pagesize和数据data
    handleSizeChange(size) {
      console.log(size);
      this.pagesize = size;
    },
    handleCurrentChange(val) {
      this.currentPage = val;
    },
    //保存问卷模板信息
    formSubmit() {
      this.$refs.profile.validate(valid => {
        console.log(valid);
        if (valid) {
          this.$confirm("确认提交吗？", "提示", {}).then(() => {
            this.formLoading = true;
            debugger;
            this.$axios
              .post("/modular/savePaperTemplate", this.profile)
              .then(res => {
                debugger;
                this.formLoading = false;
                if (res.data.code == 200) {
                  this.$message({
                    message: "提交成功",
                    type: "success"
                  });
                  this.$refs["profile"].resetFields();
                  this.getAllModularList();
                } else {
                  this.$message({
                    type: "error",
                    message: "创建失败!"
                  });
                }
                this.formVisible = false;
              });
          });
        }
      });
    },
    //打开添加问卷模板表单
    addModular(fTitle) {
      this.fromTitle = fTitle;
      this.profile.queTitle = null;
      this.profile.remarks = null;
      this.profile.queDescribe = null;
      this.profile.sn = null;
      this.formVisible = true;
    },
    //打开编辑问卷模板表单
    updateModular(fTitle, row) {
      this.fromTitle = fTitle;
      this.profile.queTitle = row.queTitle;
      this.profile.remarks = row.remarks;
      this.profile.sn = row.sn;
      this.profile.queDescribe = row.queDescribe;
      this.formVisible = true;
    }
  },
  addUsers() {},
  mounted() {
    //监听当前窗口高度
    window.onresize = () => {
      return (() => {
        this.screenHeight = window.innerHeight - 220;
      })();
    };
    this.getAllModularList();
  }
};
</script>
<style></style>
