<!--
程序名：问题设计页面
功能：对问卷中问题的添加、编辑、删除
-->
<template>
  <div class="Design" v-loading="loading" element-loading-text="加载中...">
    <h3>{{ title }}</h3>
    <div class="top" v-if="desc != ''">
      {{ desc }}
    </div>
    <el-card
      class="box-card"
      :key="index"
      v-for="(item, index) in detail"
      style="margin: 10px;"
    >
      <div slot="header" class="clearfix">
        <div class="questionTitle">
          <!--显示必填标识-->
          <span style="color: #F56C6C;">
            <span v-if="item.isMust">*</span>
            <span v-else>&nbsp;</span>
          </span>
          <span style="color: black;margin-right: 3px;">{{
            index + 1 + "."
          }}</span>
          {{ item.mainTitle }}
        </div>
        <div style="float: right;">
          <el-button
            style="padding: 2px"
            type="text"
            @click="editorQuestion(item)"
            >编辑</el-button
          >
          <el-button
            style="padding: 2px;color: #F56C6C"
            type="text"
            @click="deleteQuestion(index)"
            >删除</el-button
          >
        </div>
      </div>

      <!--单选题展示-->
      <div
        class="text item"
        :key="index"
        v-for="(option, index) in item.options"
      >
        <div v-if="item.questionType == '2'">
          <el-radio
            v-model="item.radioValue"
            :label="index"
            style="margin: 5px;"
            >{{ option.title }}</el-radio
          >
        </div>
      </div>

      <!--多选题展示-->
      <el-checkbox-group
        v-if="item.questionType == '3'"
        v-model="item.checkboxValue"
      >
        <div
          class="text item"
          :key="index"
          v-for="(option, index) in item.options"
        >
          <el-checkbox :label="index" style="margin: 5px;">{{
            option
          }}</el-checkbox>
        </div>
      </el-checkbox-group>

      <!--填空题展示-->
      <el-input
        v-if="item.questionType == '1'"
        type="textarea"
        resize="none"
        v-model="item.textValue"
      >
      </el-input>
    </el-card>

    <el-button
      icon="el-icon-circle-plus"
      @click="addQuestion"
      style="margin-top: 10px;"
      >添加题目</el-button
    >

    <br /><br /><br /><br /><br />

    <!--添加题目弹窗-->
    <el-dialog
      :title="dialogTitle"
      :visible.sync="dialogShow"
      :close-on-click-modal="false"
      class="dialog"
    >
      <el-form ref="form" :model="willAddQuestion" label-width="80px">
        <el-form-item label="题目类型" style="width: 100%;">
          <el-select
            v-model="willAddQuestion.questionType"
            placeholder="请选择题目类型"
            @change="typeChange"
          >
            <el-option
              v-for="item in allType"
              :key="item.value"
              :label="item.label"
              :value="item.value"
            >
            </el-option>
          </el-select>
        </el-form-item>
        <el-form-item label="是否必填" style="width: 100%;">
          <el-checkbox v-model="willAddQuestion.isMust">必填</el-checkbox>
        </el-form-item>
        <el-form-item label="题目标题" style="width: 100%;">
          <el-input
            v-model="willAddQuestion.mainTitle"
            placeholder="请输入标题"
          ></el-input>
        </el-form-item>

        <template
          v-if="
            willAddQuestion.questionType == '2' ||
              willAddQuestion.questionType == '3'
          "
        >
          <el-form-item
            :label="'选项' + (index + 1)"
            :key="index"
            v-for="(item, index) in willAddQuestion.option"
          >
            <el-row>
              <el-col :span="16">
                <el-input
                  v-model="item.title"
                  placeholder="请输入选项名"
                  style="width: 90%;"
                ></el-input>
              </el-col>
              <el-col :span="8">
                <el-button
                  type="danger"
                  plain
                  class=""
                  @click="deleteOption(index)"
                  >删除选项</el-button
                >
              </el-col>
            </el-row>
          </el-form-item>
          <el-button
            type="primary"
            plain
            class="addOptionButton"
            @click="addOption"
            >新增选项</el-button
          >
        </template>
        <template v-if="willAddQuestion.questionType == '1'">
          <el-form-item label="填空">
            <el-input
              type="textarea"
              style="width: 80%"
              resize="none"
            ></el-input>
          </el-form-item>
        </template>
      </el-form>
      <br />
      <div style="width: 100%;text-align: right">
        <el-button style="margin-left: 10px;" @click="dialogShow = false"
          >取消</el-button
        >
        <el-button
          type="primary"
          style="margin-left: 10px;"
          @click="checkAddQuestion"
          >完成</el-button
        >
      </div>
    </el-dialog>
  </div>
</template>
<script>
export default {
  data() {
    return {
      loading: false, //页面加载中
      dialogShow: false,
      dialogTitle: "",
      detail: [],
      sn: "", //问卷SN
      title: "", //问卷标题
      desc: "", //问卷备注
      willAddQuestion: {
        //保存问卷问题信息
        paperSN: this.sn, //问卷SN
        questionType: "", //问题类型
        mainTitle: "", //问题主标题
        option: [
          {
            title: "" //选项标题
          }
        ],
        sortOrder: 1, //问题顺序
        isMust: false //是否必填
      },
      allType: [
        {
          value: "2",
          label: "单选题"
        },
        {
          value: "3",
          label: "多选题"
        },
        {
          value: "1",
          label: "填空题"
        }
      ]
    };
  },
  methods: {
    //初始化问卷所有问题
    init(sn, title, desc) {
      this.sn = sn;
      this.title = title;
      this.desc = desc;
      this.getQuestionList();
    },
    //获取问题列表(问卷内容)
    getQuestionList() {
      this.detail = [];
      this.loading = true;
      this.$axios.get(`/questions/${this.sn}`).then(data => {
        this.detail = data.data.data;
        this.loading = false;
      });
    },
    //点击添加问题按钮
    addQuestion() {
      if (this.sn == 0 || this.sn == null) {
        this.$message({
          type: "error",
          message: "清先创建问卷!"
        });
        return;
      }
      this.dialogTitle = "添加题目";
      this.willAddQuestion = {
        paperSN: this.sn, //问卷SN
        questionType: "", //问题类型
        mainTitle: "", //问题主标题
        option: [], //选项标题
        sortOrder: 1, //问题顺序
        isMust: false //是否必填
      };
      this.dialogShow = true;
    },
    //删除问题
    deleteQuestion(index) {
      this.$confirm("确定删除此题目?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      }).then(() => {
        this.$axios.delete(`/questions/${this.detail[index].sn}`).then(data => {
          console.log(data);
          if (data.data.code == 200) {
            this.detail.splice(index, 1);
            this.getQuestionList();
            this.$message({
              type: "success",
              message: "删除成功!"
            });
          } else {
            this.$message({
              type: "error",
              message: data.msg
            });
          }
        });
      });
    },
    //确认添加/保存题目
    checkAddQuestion() {
      //添加保存问题
      let newItem = {}; //新添加的问题对象
      newItem = {
        questionType: this.willAddQuestion.questionType,
        mainTitle: this.willAddQuestion.mainTitle,
        option: this.willAddQuestion.option,
        sortOrder: this.sortOrder,
        isMust: this.willAddQuestion.isMust
      };
      newItem.radioValue = -1;
      newItem.checkboxValue = [];
      newItem.textValue = "";
      this.$axios.post("/questions", this.willAddQuestion).then(data => {
        console.log(data);
        newItem.id = data.data.code;
        if (data.data.code == 200) {
          this.dialogShow = false;
          this.$message({
            type: "success",
            message: "保存成功!"
          });
          this.getQuestionList();
        } else {
          this.dialogShow = false;
          this.$message({
            type: "error",
            message: "添加失败! 请重新尝试。"
          });
        }
        this.willAddQuestion = {
          paperSN: this.sn, //问卷SN
          questionType: "", //问题类型
          mainTitle: "", //问题主标题
          option: [], //选项标题
          sortOrder: 1, //问题顺序
          isMust: false //是否必填
        };
      });
    },
    //点击编辑问题按钮
    editorQuestion(item) {
      this.willAddQuestion.title = item.title;
      this.willAddQuestion.type = item.type;
      this.willAddQuestion.option = JSON.parse(JSON.stringify(item.option));
      this.willAddQuestion.text = item.text;
      this.willAddQuestion.row = item.row;
      this.willAddQuestion.must = item.must;
      this.willAddQuestion.id = item.id;
      this.dialogTitle = "编辑问题";
      this.dialogShow = true;
    },
    //添加选项
    addOption() {
      this.willAddQuestion.option.push({
        title: ""
      });
    },
    //删除选项
    deleteOption(index) {
      this.willAddQuestion.option.splice(index, 1);
    },
    //切换问题类型
    typeChange(value) {
      console.log(value);
      this.willAddQuestion.questionType = value;
      this.willAddQuestion.option = [{}];
    }
  }
};
</script>
<style scoped>
.Design {
  padding: 0%;
}
.Design .dialog {
  text-align: left;
}
.Design .questionTitle {
  display: inline-block;
  width: 80%;
  font-size: 16px;
  color: #303133;
}
.Design .addOptionButton {
  display: inline-block;
  margin-left: 80px;
}
.box-card {
  width: 100%;
  text-align: left;
}
.Design .top {
  color: #606266;
  margin-left: 20px;
  padding: 0 10px 10px 10px;
  border-bottom: 3px solid #409eff;
  font-size: 15px;
  line-height: 22px;
  text-align: left;
}
</style>
