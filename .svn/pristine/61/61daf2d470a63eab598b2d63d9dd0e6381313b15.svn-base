<!--
程序名：用户管理
功能：管理网站的所有用户
-->
<template>
  <section>
    <!--工具条-->
    <el-col
      :span="24"
      class="el-table_headtoolbar"
      style="padding-bottom: 15px;"
    >
      <el-col :span="4" :offset="20">
        <el-button plain type="primary" icon="el-icon-plus" @click="addUser"
          >添加用户</el-button
        >
      </el-col>
    </el-col>
    <el-table
      :data="userList"
      :default-sort="{ prop: 'date', order: 'descending' }"
      :height="screenHeight"
      border
    >
      <el-table-column prop="sn" sortable label="编号" width="200">
      </el-table-column>
      <el-table-column prop="fullName" label="姓名" width="150">
      </el-table-column>
      <el-table-column prop="dutyName" label="职位" width="120">
      </el-table-column>
      <el-table-column prop="unitFullName" label="单位全名"> </el-table-column>
      <el-table-column
        prop="enabledMark"
        label="启用状态"
        :formatter="enabledMarkFormat"
        width="100"
      >
      </el-table-column>
      <el-table-column align="right" fixed="right" width="200">
        <template slot="header" slot-scope="scope">
          <el-input
            v-model="queryJson"
            size="mini"
            placeholder="输入关键字搜索"
            :input="searchRole(scope)"
          />
        </template>
        <template slot-scope="scope">
          <el-button size="mini" @click="resetPassword(scope.$index, scope.row)"
            >重置密码</el-button
          >
          <!--<el-button size="mini" @click="handleEdit(scope.$index, scope.row)"
            >编辑</el-button
          >-->
          <el-button
            size="mini"
            type="danger"
            @click="handleDelete(scope.$index, scope.row)"
            >删除</el-button
          >
        </template>
      </el-table-column>
    </el-table>
    <!--翻页栏-->
    <el-col :span="24" class="el-table_footertoolbar">
      <el-pagination
        :hide-on-single-page="false"
        background
        layout="total, sizes, prev, pager, next"
        :page-sizes="[10, 20, 50, 100]"
        :total="total"
        style="float:right;"
        @size-change="handleSizeChange"
        @current-change="handleCurrentChange"
      >
      </el-pagination>
    </el-col>
    <!--保存用户界面-->
    <el-dialog :title="fromTitle" :visible.sync="formVisible">
      <el-form
        :model="profile"
        label-width="80px"
        :rules="profileRules"
        ref="profile"
      >
        <el-form-item label="账户" prop="account">
          <el-input v-model="profile.account" auto-complete="off"></el-input>
        </el-form-item>
        <el-form-item label="姓名" prop="fullName">
          <el-input v-model="profile.fullName"></el-input>
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click.native="formVisible = false">取消</el-button>
        <el-button
          type="primary"
          @click.native="formSubmit"
          :loading="formLoading"
          >提交</el-button
        >
      </div>
    </el-dialog>
  </section>
</template>

<script>
export default {
  data() {
    return {
      userList: [], //用户信息
      queryJson: "", //搜索条件
      screenHeight: window.innerHeight - 220, //当前窗体高度-导航栏高度
      currentPage: 1,
      pagesize: 10,
      total: 0,
      profile: {
        //保存用户信息
        account: "", //账户名称
        password: "0000", //密码
        fullName: "", //姓名
        sn: "" //用戶SN
      },
      profileRules: {
        //表单用户信息的格式显示
        account: [
          {
            required: true,
            message: "账户必须填写!!",
            trigger: "blur"
          }
        ],
        fullName: [
          {
            required: false,
            message: "请输入姓名",
            trigger: "change"
          }
        ]
      },
      formVisible: false, //表单的打开和关闭的控制
      formLoading: false, //表单
      fromTitle: "新增用户" //
    };
  },
  components: {},
  methods: {
    //编辑用户信息
    handleEdit(index, row) {
      console.log(index, row);
    },
    //删除用户信息
    handleDelete(index, row) {
      this.$confirm("确认要删除此用户信息吗？", "提示", {}).then(() => {
        this.$axios.delete(`/user/${row.sn}`).then(res => {
          if (res.data.code == 200) {
            this.$message({
              type: "success",
              message: "删除成功!"
            });
            this.loading = false;
            this.getAllUserList();
            this.defaultActive = 1;
          } else {
            this.$message({
              type: "error",
              message: data.msg
            });
          }
        });
      })
    },
    //重置用户密码
    resetPassword(index, row) {
      this.$confirm("确认要重置密码吗？", "提示", {}).then(() => {
        this.$axios.post(`/user/resetUserPassword/${row.sn}`).then(res => {
          if (res.data.code == 200) {
            this.$message({
              type: "success",
              message: "重置密码成功，重置密码为0000!"
            });
            this.loading = false;
            this.getAllUserList();
            this.defaultActive = 1;
          } else {
            this.$message({
              type: "error",
              message: data.msg
            });
          }
        });
      })
    },
    //搜索
    //当输入框内容发生改变时或者失去输入框焦点时触发
    searchRole(scope) {
      console.log(this.searchStr + "搜索");
      this.getAllUserList();
    },
    //获取问卷列表
    getAllUserList() {
      this.$axios.get("/user/queryGridJson").then(res => {
        this.userList = res.data.data.rows;
      });
    },
    //数据格式化
    enabledMarkFormat(row, column) {
      if (row.enabledMark === true) {
        return "启用";
      } else {
        return "未启用";
      }
    },
    //初始页page、初始每页数据数pagesize和数据data
    handleSizeChange(size) {
      console.log(size);
      this.pagesize = size;
    },
    handleCurrentChange(val) {
      this.currentPage = val;
    },
    //保存用户信息
    formSubmit() {
      this.$refs.profile.validate(valid => {
        console.log(valid);
        if (valid) {
          this.$confirm("确认提交吗？", "提示", {}).then(() => {
            this.formLoading = true;
            this.profile.password=this.$md5(this.profile.password)
            this.$axios.post("/user/saveUserInfo", this.profile).then(res => {
              this.formLoading = false;
              if (data.data.code == 200) {
                this.$message({
                  message: "提交成功",
                  type: "success"
                });
                this.$refs["profile"].resetFields();
                this.getAllUserList();
              } else {
                this.$message({
                  type: "error",
                  message: "创建失败!"
                });
              }
              this.formVisible = false;
            });
          });
        }
      });
    },
    //打开表单
    addUser() {
      this.fromTitle = "新增用户";
      this.formVisible = true;
    }
  },
  addUsers(){

  },
  mounted() {
    //监听当前窗口高度
    window.onresize = () => {
      return (() => {
        this.screenHeight = window.innerHeight - 220;
      })();
    };
    this.getAllUserList();
  }
};
</script>
<style></style>
